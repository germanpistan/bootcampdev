HISTORIA DE LA PROGRAMACION: 
    DECADA DE 1940: se crea el primer sistema de codificacion ENIAC. instruccion nemotecnica: una forma corta de decir, haz algo. 
    Ejemplo: move: mover datos de un procesador. es mas sencillo programar con este sistema nemotecnico. 
    no era tan amigable esto. se inventan otro tipo de lenguajes entre el 50 y 70.
    FORTRAN, BASIC Y COBOL. el mas importante fue cobol. simplifico la forma de hacer informatica. 
    aparecen evoluciones en el lenguaje. Otro lenguaje de los 60 fue BCPL, es el lenguaje precursor del C. 
    es importante xq la parte central de un sistema operativo actuales (su KERNEL) tienen escrito en C. 
    Se usa mucho hoy, combina el bajo nivel y el alto nivel, tiene sintaxis y forma de ejecutar condiciones logicas. 
    igualmente C tiene algunas carencias, algunos lo consideran dificil. 
    Otros lenguajes: decada de los 70, aparece a parte del C, es el PASCAL, se sigue usando pero no tanto. 
    el lenguaje de programacion DELFI deriva de PASCAL. Hasta ahora son todos de proposito general, esos lenguajes se concibieron para cualquier tipo de programa en ellos. 

    DECADA DE LOS 80: lenguajes de nicho. son lenguajes especializados en una o pocas tareas, que no se usan para todo. se usa mucho en defensa, es lenguaje ADA. otro es PERL se uso mucho hasta principios de los 2000, simplificaba mucho trabajabar con ficheros de texto. Evoluciono pero se usa cada vez menos. TCL es otro lenguaje. 
    DECADA DE LOS 90: boom de internet, salieron lenguajes que combinaban como nicho y generales. JAVA se diseño para sistemas embebidos (sistema pequeño que necesita pocos recursos). Applex eran pequeños programas que daban funciones a nuestro navegador. de aca derivo JAVASCRIPT nos permite dar dinamismo a un navegador. Tambien nacio PYTHON en los 90, que se usa mucho. PHP nace en 1995. tambien nacio RUBY. otro que se usa para videojuegos es LUA. 

    DECADA DE LOS 2000 a la actualidad: ACTIONSCRIPT, se uso para hacer animaciones 2d, orientadas a dibujos o web, se llamaban banners, se conoce mas como FLASH. ya no se usa mas.
    Esto dio pie como HTML y JAVASCRIPT tengan mas animaciones hoy en dia. 
    C# o .NET, para entornos WINDOWS. Lenguaje GO,SWIFT (para apps moviles), usan parte java SCALA y CLOJURE. SCRATCH es sencillo, intuitiva para aprender. 

TIPOS DE LENGUAJES DE PROGRAMACION:
    Se dividen en tipos:
        LENGUAJE COMPILADO: son aquellos que a partir de nuestro codigo se genera un programa que el procesador es capaz de ejecutar directamente a traves del sistema operativo. usan un compilador, que transforma ese lenguaje en sistema binario y lo ejecuta. se ejecuta nativamente, sin ayuda intermedia. va mucho mas rapido pero necesito un compilador que me genere esa secuencia binaria acorde a mi procesador, por eso son distintas las secuencias de procesador debido a su arquitectura, para esto deberia generar versiones para cada procesador. 
        EJEMPLOS: C, GO
        LENGUAJES INTERPRETADOS: parte igual del codigo fuente no se compila a algo que entiende el procesador, se puede compilar a algo intermedio, esto se suele llamar BITECODE. el procesador no entiende esa cosa intermedia, entonces se necesita un INTERPRETE. esto es un programa que lee el codigo, y ejecuta el programa paso a paso, pero no lo ejecuta directamente sobre el procesador, si no sobre el mismo lo ejecuta. es mucho mas lento que los compilados. 
        EJEMPLOS: JAVA, ya que se ejecuta sobre la JAVA VIRTUAL MACHINE o JVM.
        PYTHON, PERL, PHP. Tienen ventaja ya que escribo el programa por unica vez y solo necesito un interprete para ese lenguaje para ese procesador. generalmente se ejecuta en cualquier parte, ya que vale para cualquier arquitectura de procesador. 

        LENGUAJES HIBRIDOS: son lenguajes interpretados, cuyo interprete es capaz de compilar al codigo nativo segun haga falta. compilador GIT, tiene lo bueno del interprete y del compilador. 

        LENGUAJES TIPADOS o NO TIPADOS:
            TIPADOS: aquellos en lo que puedo almacenar datos pero le tengo que decir que tipo de dato es (numero, cadena de texto, etc)
            NO TIPADOS: aquellos en los que mi compilador/ interprete deduce automaticamente que tipo de dato es. 

        esta division se debe segun a su desarrollador, por ej: PHP es no tipado, C es tipado, GO es tipado, JAVA es tipado. no puedo cambiarlos. 

    TIPOS DE APLICACIONES:
        APLICACIONES WEB: ejemplos: la app web del bootcamp. 

        arquitectura: como primera capa es lo que el usuario ve (front end):
            tres elementos: HTML, CSS, JAVASCRIPT trabajan cohesionados., tiene un codigo HTML, que seria el codigo fuente. tambien tiene codigo JAVASCRIPT (la parte de la funcionalidad) interactua en forma dinamica,  hay otra parte mas los estilos CSS.
        como segunda capa: Back end de una app web: 
            es el sistema remoto (servidor, otro ordenador) que contiene la informacion que solicita el usuario. puede estar escrito en uno o multiples lenguajes. 

        APLICACIONES DE ESCRITORIO: la parte que vemos es la que el usuario interactua. tiene front y back. cambia como esta programada.  son parecidas pero cambian las tecnologias. generalmente para windows es .net o C++, en linux desarrollada C o C++. tiene mucha informacion, menus, 

        APLICACIONES MOVILES: la del celu. es muy similar a las otras. tiene front y back. tiene menos informacion, aca se centran en lo que se denomina vista con serie de acciones. todas las apps tiene F y B.

    APLICACIONES CLIENTE-SERVIDOR: son las front end y back end. 
        por ejemplo: twitter en el celu. se empezaron a usar fines de los 90. obtiene informacion de un servidor remoto, usando una aplicacion cliente. cuando se hace estan apps se usa el protocolo HTTP, para acceder a APIs. estas APIs, ayudan a devolver la informacion. una API es un conjunto de funciones que yo le pido algo con mi cliente, se lo envio a un servidor, y devuelve la informacion. se usan librerias externas, las uso y me da igual lo que haya por debajo. puedo buscar en internet las librerias que necesito para armar las APIs, para copiar los codigos y generarlas.

MEMORIA Y VARIABLES:
    LA MEMORIA es donde nuestro ordenador contiene informacion que si no la pone ahi, no puede trabajar. no es infinita la memoria, tiene una cierta capacidad, es decir un limite. a la informacion dentro de la memoria se accede por la direccion de la memoria. en caso que tengamos millones de posiciones de memoria, por eso se inventaron las variables: es un nombre humano para una posicion de memoria. por ejemplo: direcciones de memoria: numero, decimal, saluda, otro. ademas es dinamica la memoria, es decir que puedo cambiar la informacion, mantengo la palabra numero pero va cambiando la informacion dentro. 
    ejemplo:

    numero = 1234 (no me importa la posicion de memoria)
    decimal = 2.2
    saluda = hola
    otro = adios
    por esto asigno variables, para que sea mas facil usar la informacion y no me interesa las posiciones de memoria. 

    FUNCIONA con dos tipos de VARIABLES: 
        VARIABLES : pueden cambiar su valor en cualquier momento.es toda aquella que almaceno en un lugar de memoria pero durante el ciclo de programa la puedo cambiar. la mayoria de son variables.  
        VARIABLES NO CAMBIANTES o CONSTANTES: se llaman CONSTANTES, no puedo cambiar la informacion dentro. es una asignacion en la memoria que no puedo variar en la ejecucion del programa. 
        
INTRODUCCION A LOS TIPOS DE DATOS PRIMITIVOS: es un tipo de dato basico para cualquier lenguaje.
    CARACTER: representa un unico caracter o letra, o unico numero, o unico simbolo. ej. "a","9", "-".
    cada uno de estos datos ocupa un lugar unico en la memoria. la memoria almacena en este caso un numero, 
    que corresponde en la tabla de valores para cada caracter (tabla ascii).por ejemplo: cuando uso a, la memoria almacena el numero 97. 
    como se declara un caracter. primero la variable, luego =, luego el caracter. siempre se pone entre comillas simples. este tipo de dato es uno de los primitivos. 

    TEXTO: es una secuencia de caracteres. "hola". se le llama string. en memoria se representa en cada posicion de memoria una letra, y son consecutivas. entonces hace referencia a un string y se guardan numeros como el anterior. las variables de tipo string son una secuencia de numeros de memoria de tabla ascii. los caracteres ascii normales ocupan 1 bite (8 bit) en memoria. entonces un string de 4 caracteres ocupa 32 bits, o sea 4 bytes. 

    DATOS NUMERICOS:
        cual es la diferencia entre:
            variable = '1' (hace referencia en la tabla ascii al numero que contiene el caracter 1, en este caso numero 49 )
            variable = 1 (hace referencia literalmente al numero 1)
            variable = "1" (hace referencia al string 1)
    se dividen en dos, numero enteros y de coma flotante. 
    numeros=1234 (enteros)
    numeroF=1234.5678 (flotante)
    habitualmente los numeros en los lenguajes de programacion son de 32 bits o 64 bits.
    se representan en memoria como numeros binarios. ej: 1234, son 4 bytes, . algo asi :
    se cuenta de derecha a izquierda. se guardan en la memoria en octetos, de a 8 ceros y unos. 
    00000000000000000000000000000000 (32 ceros). 
    los flotantes son los decimales, se guardan una parte de la memoria la parte entera y en otra la parte decimal. 

    BOOLEANOS: solo pueden 0 o 1. en otro lenguaje puede ser true o false. 
        se representa solo en dos lugares. 

TIPOS DE DATOS COMPLEJOS:
    ARRAYS: conjunto de un mismo de dato simple. []. pueden tener multiples elementos de datos simples. por ej: 
        arrayChar= ['a','b','c','d']
        arrayString = ["hola", "adios"]
        arrayNumeros = [0,1,2,3,4,5,6]
        arrayNumeroF = [1.1,4.4,3.14] 
        conjunto de MISMO TIPO DE DATOS. 
        un array invalido seria tener un conjunto de distintos tipos de datos. 

        arrayArrays=[
            [1,2,3]
            [4,5,6]
        ]
        a esto se le llama array bidimensional. 

    TUPLAS: se usan en algunos lenguajes. los elementos no son variables o son inmutables, mientras que en los array son mutables.  
    tupla = (a,b,c)
    mapa asociativo o array asociativo: dentro tiene un elemento "clave" y asociado un elemento valor. 

    arrayCapitalesPais [
        "Ucrania" => "Kyev",
        "España" => "Madrid"
    ]
    puedo hacer referencia. estos tambien se llaman mapas, arrays que tienen un elemento clave seguido de un valor asignado a esa clave. 
    tambien existen diccionarios, que son parecidos a estos. 

OBJETOS: algo que la logica de nuestro programa intenta representar en el mundo real. pueden tener propiedades. ej: caja rectangular.
    MUNDO REAL
    caja: 
    Propiedades: 
        color: blanco
        forma: rectangular
    PROGRAMACION LENGUAJE JAVA
    
    ej en java:

    class Caja {
        String Color = "blanco";
        String Forma = "rectangular";
        int Largo =20;
    }

    los objetos tienen metodos, algo que puede alterar las propiedades. 
    Ejemplo juguete:

    juguete: 
    Propiedades: 
        color: marron
        forma: patata
    Metodos:
        Poner sombrero
        Quitar brazo


    class Juguete {
        String Color = "marron";
        String Forma = "patata";
        
        ponerSombrero(){}
        quitarBrazo (){}
    }

CONSEJOS PARA TIPOS DE DATOS:
    String 
        nombre = "German" + '0'
        este ultimo caracter indica el final de una cadena de texto. o sea que por ej: German no tiene 6 posiciones guardando, tiene 7, mas el 0. 

    los string son una conveniencia. xq es un array de caracteres por debajo. por conveniencia los lenguajes de programacion nos permiten usar el nombre = "german". pero es array. 

FUNCIONES. DEFINICION Y CONCEPTOS: nos evita tener que repetir codigo. dentro de la funcion puede ir cualquier sintaxis de lenguaje. cuando tenemos que hacer muchas veces la misma tarea, creamos una funcion para no tener que escribir muchas veces el mismo codigo. 
tienen una firma o prototipo o signature. esto consiste en: como se llama la funcion, que valores acepta, y que tipo de datos retorna la funcion en caso que lo haga. 
ejemplo en java: 
    public static int suma (int a, int b) {
        return a + b
    }
    primero pongo el tipo de dato que quiero que devuelva con int, luego dentro de los parentesis los datos que tengo que poner para invocarla y el tipo. luego lo que quiero que haga o devuelva. 

    para invocar a la funcion tengo que poner el nombre y los parametros que me pida. algunas no tienen xq devolver nada, como en java que uso void.
    cuando la funcion devuelvo algo es xq necesito ese retorno despues para otra funcion o dentro de mi programa. 

USOS DE FUNCIONES:
    los parametros o sea las variables dentro de la funcion, solo existen dentro de ellas mismas. 
    puede aceptar parametros o no las funciones. puede ser parametros de distintos tipos. puede devolver el varlor del tipo que creamos conveniente. podemos importar paquetes de codigos con funciones. los lenguajes hoy son modulares, es decir, se pueden crear conjuntos de funciones y compartirlos. esto se llaman librerias. 
    tambien tiene el cuerpo de la funcion: donde la funcion implementa su logica. tiene que ser pequeña y util. los parametros solamente existen dentro del cuerpo de la funcion. es decir que por ej: tengo un parametro a en una funcion, puedo poner una variable a fuera de la funcion y no se solapan; se pueden llamar igual siempre que no esten en la misma funcion. 

FUNCIONES AVANZADAS:
    hay dos formas de pasar parametros a las funciones:
        paso por valor: ya en la funcion defino los parametros y cuando la llamo, los valores se copian en la llamada de la funcion, en lugar de los parametros. se copia tambien el tipo de dato. por debajo se reserva el espacio de memoria cuando copio esos parametros, es decir, usa misma cantidad de memoria y ocupa dos veces, una vez cuando la defino y otra cuando la llamo.

        paso por referencia: le paso una direccion de memoria como parametro, y la funcion modifica lo que haya en esa direccion de memoria. no es copia de valor, si no que pasa una referencia de memoria. un puntero es una referencia a un area de la memoria de un ordenador. el objeto trabaja por debajo con punteros. aca uso menos memoria, que el paso por valor que se duplica la cantidad de memoria. 

    FUNCIONES RECURSIVAS: funcion que devuelve valor y que se invoca a si misma. por ejemplo un bucle de funcion suma, en donde se invoca constantemente. 
    CALLBACK: asignar el nombre de una funcion a una variable. luego invoco indirectamente a mi funcion a traves de la variable, que por debajo es funcion. en java si se puede usar, pero son interface. 

CONDICIONALES: son una serie de reglas que nosotros le ponemos al programa para que lo haga. son sentencias de control, que usan condiciones. 
los condicionales son condiciones, suelen ser que comparan una cosa con otra. 
LOGICAS:
    "Y" dos o mas cosas deben cumplirse. &&
    "O" una o mas cosas deben cumplirse   ||

COMPARATIVAS:
    "MAYOR QUE" >
    "MENOR QUE"<
    "MAYOR O IGUAL QUE" >=
    "MENOR O IGUAL QUE" <=
    "IGUAL A" ==
    "DISTINTO A" !=

se comparan cosas de izquierda con derecha. en este caso, se evalua la condicion. pueden tener dos resultados. True o False. 
las condiciones se cumplen o no. esto es logica booleana. ver tablas de la verdad. 

SI (if) se usa para declarar una condicion. 

VAR ESTACION = "VERANO"
VAR TEMPERATURA = 19
SI (ESTACION IGUAL A "VERANO") Y (TEMPERATURA MAYOR QUE 20) ENTONCES 
    AQUI LAS ACCIONES A TOMAR
    BEBER_AGUA
    BAÑARSE_EN_LA_PISCINA ()
    TOMARSE_UN_MOJITO()
    IRSE_AL_BAR()
esto seria la logica del si escrita sin codigo, solo se cumple si la palabra es verano. en caso que la palabra sea invierno, no hace nada. ESE CODIGO NO SE CUMPLE, XQ CUMPLE SOLO CON UNA PARTE, NO CON LA PARTE DE LA TEMPERATURA. si se cumplen todas las condiciones de ese condicional si se ejecutaria ese condicional. 

tambien tiene un caso contrario.

VAR ESTACION = "VERANO"
VAR TEMPERATURA = 19
SI (ESTACION IGUAL A "VERANO") ENTONCES   "if"
    AQUI LAS ACCIONES A TOMAR
    BEBER_AGUA
    BAÑARSE_EN_LA_PISCINA ()
    TOMARSE_UN_MOJITO()
    IRSE_AL_BAR()
EN CASO CONTRARIO SI (ESTACION IGUAL A "PRIMAVERA") ENTONCES  "else if" o "elif"
    SALIR_DE_PASEO()
    IR_A_VER_A_LOS_AMIGOS ()
EN CASO CONTRARIO ENTONCES:   "else"
    PONERSE_EL_ABRIGO()
    BEBER_CHOCOLATE_CALIENTE()
    VER_LA_TELE()

public class ejemplo_java {

    public static void main (String[] args) {
        String estacion = "otoño";

        if (estacion == "primavera") {
            System.out.print("Es primavera");
        }  else if (estacion =="verano") {
            System.out.println("Es verano");
        }    else {
                System.out.println( "es otra estacion...");
        }

        }
    }

BUCLES WHILE Y DO WHILE:
    un bucle es hacer algo un numero determinado de veces o indeterminado de veces. es un fragmento de codigo que se va a ejecutar n veces mientras se cumpla una condicion. 
    WHILE: mientras se cumpla una condicion se ejecuta.
    
    VAR CONTADOR = 10
    MIENTRAS (CONTADOR MAYOR A CERO) evalua primero esta condicion y ejecuta. 
        RESTA UNO AL CONTADOR

    SIGO POR AQUI

    public class ejemplo_java {

    public static void main(String[] args) {
        int contador = 10;

        while (contador > 0) {
            System.out.println("Contador vale: " + contador);
            contador = contador - 1;
            contador--; (forma corta de escribir contador = contador -1)
        }
    }
}
una iteracion es cuando comprueba la condicion y vuelve arriba, es decir, cada ciclo del while. 

DO WHILE: 
VAR CONTADOR = 10
HAZ
    RESTA UNO AL CONTADOR 
MIENTRAS (CONTADOR SEA MAYOR QUE 10)
la diferencia: el while primero evalua la condicion y luego ejecuta las acciones.
el DO WHILE primero ejecuta las acciones y luego evalua la condicion (seguro se ejecuta una vez, despues depende si cumple la condicion)

public class ejemplo_java {

    public static void main(String[] args) {
        int contador = 10;

        do {
            System.out.println(contador);
            contador = contador - 1;
        } while (contador >10);

        }
    }
    }
//en este caso muestra el 2, xq el do while primero ejecuta y despues condiciona

    en este caso primero se ejecuta la accion y despues se comprueba la condicion. haz mientras. 

BUCLES FOR: "PARA". es una mezcla de todos. 
    se suele dividir en tres partes: la parte de declaracion, la de comparacion y la de accion. 
    primer parametro inicializacion; comparacion;accion)

    VAR CONTADOR =10

    "PARA" (INICIALIZACION;COMPARACION;ACCION)
    "PARA"(;CONTADOR MAYOR QUE 0; CONTADOR IGUAL A CONTADOR MENOS 1)
        IMPRIME EL VALOR DE LA VARIABLE CONTADOR

se usa con tipos de datos complejos el bucle for. la accion del bucle for se ejecuta despues de ejecutar todo el cuerpo del for. se usan para recorrer arrays o tipos de datos compuestos. 
los whiles se pueden usar para comparar verdaderos o falsos. 
ejemplo de for para recorrer arrays:

    public class ejemplo_java {

    public static void main(String[] args) {
        int valores[] = new int [5];


        for (int i = 0; i < valores.length; i ++) {
            System.out.println(valores [i]);
        }
    }
}

//usar un bucle for para mostrar todos los elementos de un array

public class ejemplo_java {

    public static void main(String[] args) {
        int valores[] = {10,20,30,40,50};
                        // 0 < 5 (compara e imprime)
                        // 1 < 5
                        // 2 < 5
                        // 3 < 5
                        // 4 < 5
                        // 5 < 5 ESTA NO!! aca sale del bucle.
        for (int i = 0; i < valores.length; i ++) {
        for (int i = 0 : valores) "forma corta de hacer lo de arriba"
            System.out.println(valores [i]);
        }
    }
}
//usar un bucle for para mostrar todos los elementos de un array

SWITCH CASE: interruptores; una forma de control que se aplica sobre una variable o condicion. conviene usar para varias condiciones. 

VAR ESTACION = "VERANO"
DISCIERNE (ESTACION)
    CASO "VERANO"
        IMPRIME "ES VERANO"

    CASO "INVIERNO"
        IMPRIME "ES INVIERNO"

    OTRO CASO:
        IMPRIME LA ESTACION DE LA VARIABLE.

public class ejemplo_java {

    public static void main(String[] args) {
        var estacion = "VERANO";

        switch (estacion) {
            case "VERANO":
                System.out.println("es verano");
                break;
            case "INVIERNO":
                System.out.println("es invierno");
                break;
            default:
                System.out.println("estoy en default: ");
        }
    }
}

se pone un break para la ejecucion de los CASE, si no se lo pongo, no corta y ejecuta todo, y me devuelve todos los case. cuando se ejecuta la condicion de un case, se ejecuta todo lo demas hasta un break. 

public class ejemplo_java {

    public static void main(String[] args) {
        var hoy_es = "SABADO";

        switch (hoy_es) {
            case "LUNES":
            case "MARTES":
            case "MIERCOLES":
            case "JUEVES":
            case "VIERNES":
                System.out.println("hoy se labura");
                break;
            case "SABADO":
            case "DOMINGO":
                System.out.println("hoy no se labura");
                break;
        }
    }
}

OTRA FORMA MAS CORTA:

 public static void main(String[] args) {
        var hoy_es = "SABADO";

        switch (hoy_es) {
            case "LUNES":
            case "MARTES":
            case "MIERCOLES":
            case "JUEVES":
            case "VIERNES":
                System.out.println("hoy se labura");
                break;
            default:
                System.out.println("hoy no se labura");
                
        }
    }
}

GESTION DE ERRORES:
    errores tipicos de programador cuando recien empezas:

    nombrar bien las variables: por ej: VAR CONTADOR = 0. es decir que cuando veo el nombre de la variable ya se para que la uso. como no se llamaria, foo, bar, foobar. 

    el codigo sin comentarios deberia entenderse normalmente por cualquier persona. las variables deben tener buenos nombres. usando bucles for no esta mal visto que se usen variables como "i", "j" o "k". "i"= index, por eso se usa asi. cuando uso arrays bidimensionales o tridimensionales, como las matrices. en este caso uso tambien "j".
    tambien se puede usar el nombre TEMP para variables temporales.
    se usa temp para variables temporales o tmp tambien. 

    otro error es hacer un codigo y no explicar que hace ese codigo con algun comentario. es decir, comentar lo que va a hacer el codigo que sigue. 

    no se debe comentar cosas logicas que hacen los codigos, es decir, comentar de mas. por eso a veces es necesario solo comentar lo mas importante.

ERRORES DEL PROGRAMADOR:
    error mas tipico, es cuando no se mantiene la coherencia en el codigo. si lo hacemos de una forma, tenemos que seguir con la misma forma de escribirlo. hay que hacer y seguir una guia de estilos. cada empresa tiene su estilo a veces. 

    hacer copias de seguridad sobre el codigo fuente que estamos trabajando, de una carpeta a otra carpeta. lo recomedable es no tenerlo al codigo en un mismo disco duro, lo mejor es usar un control de versiones (git hub). 

    usar las formas mas sencillas de lenguaje en vez de las mas complejas, las abreviadas. el error seria no usar las formas mas simples. 

    depurar un mensaje usando el print o lo que sea que muestre en pantalla; eso no se hace. para esto existe una herramienta llamada depurador. no intentar depurar usando el print, si no el soft del depurador. 

    crear funciones que son grandes. tienen que tener un cometido identificable, y tambien deberian simplificar el codigo. intentar crear funciones pequeñas, no funciones dentro de funciones si no es necesario. la funcion tiene que ser concreta. 

    REPERCUSION DE LOS ERRORES:
        







