PROYECTO DE API REST CON JERSEY
usar controlador, que es lo que ejecuta la peticion, en este caso con el metodo factory
la respuesta se emite en formato json. tiene que usar fachadas
cada pieza en una clase diferente.
se tiene que hacer el CRUD completo.
usar postman para crear una coleccion (soft para probrar apis)
la parte de REST es donde se implementan las peticiones

backend recepciona las peticiones, con postman o curl, 
se hacen peticiones en http en el ejemplo. 
wordpress: monolito, es decir, tiene la back y front suya. se ejecutan a la vez front y back, es php casi todo. 
REST a nivel de back es el punto de entrada, en este caso en http. es como se hacen todas las apis hoy en dia. 
hay varios patrones de diseño. 

PROGRAMACION FUNCIONAL:
programacion declarativa, no imperativa. tiene asociado: 
funciones puras: es toda aquella que dados unos mismos parametros de entrada, siempre produzca lo mismo de salida. 
no puede tener efectos colaterales, es decir, todo aquel cambio que se realiza cuando invoco una funcion. 
cuando una funcion pura invoca a otra funcion que podria no ser pura, esta primera ya no es pura. 
puedo modificar variables que son locales a mi funcion, ahi seguiria siendo pura. 
tambien tiene que hacer exactamente lo que dice.

ejemplo de funcion pura que produce daño colateral:

public class Main {
    private static int contador = 0;
    
    public static void main(String[] args) {
        int result = suma(1,2);
        int result2 = suma(1,2);
        System.out.println(result + " " + result2);
        System.out.println(contador);
        
    }
    public static int suma (int a, int b) {
        contador += 1;
        return a + b;
    }
}

ante los mismos parametros de entrada, si se produce distintos valores de salida no es pura. 
usualmente una funcion que llama a una base de datos suele ser impura. 

FUNCIONES HIGH LEVEL O ALTO ORDEN: una funcion puede llamar a otra funcion y debe devolver otra funcion. 
alto nivel: recibe un parametro que sea una funcion,  o tambien es cuando devuelve una funcion.
en el return me devuelva otra funcion.
lamdas: funciones especiales. 
private Function <String, String> toMayus = x -> x.toUpperCase();

import java.util.function.Function;

public class Funcionales {
    //ejemplo funcion que recibe una lambda
    //primero declaro la funcion pero como variable con Function
    //pide dos parametros <parametro que acepto entrada , parametro que devuelvo salida>, luego darle nombre

    private Function<String, String> toMayus = x -> x.toUpperCase();  //funcion lambda // x es el parametro de entrada
    //esta forma es funcional, y si fuera imperativo seria
    // public String toMayus (String x) {
    // return x.toUpperCase(); }

    private Function<Integer, Integer> sumador = x -> x.sum(x, x);  //no se puede aplicar mas xq pide devolver funcion


    public void pruebas() {
        System.out.println(toMayus.apply("German"));     //para invocar a la funcion flecha o alto nivel uso apply
        System.out.println(sumador.apply(5));
    }

esto se usa mucho para encadenar la salida de una funcion con la entrada de otra.
la programacion funcional aporta legibilidad y transformaciones 

puedo hacer que una funcion tenga como parametro otra funcion 

ArrayList<String> nombres = new ArrayList();
        nombres.add("Germany");
        nombres.add("Brazil");
        nombres.add("France");
        nombres.add("Belgium");

        nombres.stream().forEach(x -> System.out.println(x));  //funcion stream que llama otra funcion for each 



 nombres.stream().forEach(x -> System.out.println(x));  //funcion stream que llama otra funcion for each
        //con este recorro un array

        Stream<String> valores = nombres.stream().map(x -> x.toUpperCase()); //mapeo. genero una variable stream y hace el for automatico
        //una vez que recorro con stream no puedo recuperarlo
         //la funcion map aplica lo que yo indico sobre cada elemento de un stream 

        valores.forEach(x -> System.out.println(x));

el stream se consumo y ya no se puede reutilizar 
hay que crear cada stream con cada vez que se quiera iterar 

forma mas legible de escribirlo y larga:

   Stream<String> valores = nombres.stream()
                .map((x) -> {
                    return "Hola, " + x.toUpperCase();
                }); 

//si quiero meter filtro
        Stream<String> valores = nombres.stream()
                .map((x) -> x.toUpperCase())
                .filter(x -> x.startsWith("B"));  //aplica funcion de descarte filter. devuelve true o false


        valores.forEach(x -> System.out.println(x));

si quiero recorrer un array de integer y hacerlo con stream 

int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros); //convierto array a stream y consumirlo.
int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros); //convierto array a stream y consumirlo. uso IntStream
        stNumeros.forEach(x -> System.out.println(x));   //puedo iterar sobre el array de numeros, ya que es un stream


 valores.forEach(x -> System.out.println(x));

        int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros); //convierto array a stream y consumirlo. uso IntStream
        var resultado = stNumeros.filter(x -> x % 2 == 0); //filtro los pares.
        resultado.forEach(System.out::println);  //otra forma de escribir el print

reduce: agarra todos los elementos que me quedan y los reduce a una expresion

 int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros); //convierto array a stream y consumirlo. uso IntStream
        var resultado = stNumeros.filter(x -> x % 2 == 0).reduce(0,(x,y) -> {
            System.out.println("X es: " + x + " Y es: " + y);
            return x+y;
        });
        //puedo meter llave en la lamda -> para meter el codigo que quiera
        //lo puedo imprimir para ver que se va llamando a si misma, con una x pivot. 
        // reduce (1er variable 0, luego lo qeu quiero que reduzca
        //el cero es el valor inicial, puedo modificarlo si quiero e iniciar en cualquier valor

esto es la salida de una funcion filter, es la entrada de reduce. para filtrar los pares y sumarlos en cada iteracion

mejor escribirlo asi: map, filter, reduce

valores.forEach(System.out::println);

        int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros); 
        var resultado = stNumeros
                .map(x -> x*2)
                .filter(x -> x % 2 == 0)
                .reduce(0,(x,y) -> {
            System.out.println("X es: " + x + " Y es: " + y);
            return x+y;
        });

int [] numeros = {1,2,3,4,5,6,7,8,9,10,11,12,13,};
        var stNumeros = Arrays.stream (numeros);
        var resultado = stNumeros
                .map(x -> x*2)
                .filter(x -> x % 2 == 0)
                .reduce(0,(x,y) -> {
            System.out.println("X es: " + x + " Y es: " + y);
            return x+y;
        });

        //forma con el for o imperativa

        int sumaTotal = 0;
        for (int numero: numeros){
            numero = numero *2;
            if (numero %2 != 0){
                continue;
            }
            sumaTotal += numero;
        }

        System.out.println("Mi suma de pares es: " + resultado + " y con for el total es: " + sumaTotal);

RENDIMIENTO Y RECURSION:
recursion: una funcion se llama a si misma. un algoritmo es mas claro cuando se usa la recursion. 
ej: arboles binarios. factoriales. etc. 
no todo es recursivo, se puede hacer iterativa tambien.
 ejemplo de funcion recursiva:


 public class Main {
    public static void main(String[] args) {
        System.out.println(suma(5));
        System.out.println(sumaRecursiva(5));

    }
    //la forma recursiva. la funcion se llama asi misma, primero con valor 5 y luego va restando 1
    //si no paro la funcion, se ejecuta hasta el infinito. le pongo sentencia de control
    //siempre le tengo que poner sentencia de control o punto de salida de la recursividad

    public static int sumaRecursiva (int numero) {
        if (numero ==1) {  //control para que se pare
            return 1;
        }
        return numero + sumaRecursiva( numero -1);
    }

    public static int suma (int max) {
        //forma iterativa
        int resultado = 0;
        for ( int i = 0; i <= max; i++ ) {
            resultado = resultado + i;
        }
        return resultado;
    }
}

DOS TIPOS DE RECURSIVIDAD: de COLA y de CABEZA.
de COLA: lo ultimo que se ejecuta es la llamada de la funcion asi misma. ej: sumaRecursiva.
de CABEZA: lo primero que se hace, se invoca a la funcion recursiva. 


public static void headRecursion (int valor) {
        if (valor == 0) {
            return;
        }
        headRecursion(valor - 1); //primero se invoca la funcion recursiva, se hace todoy luego se lo imprime
        System.out.println(valor);
    }
    public static void tailRecursion (int valor) {
        if (valor == 0) {
            return;
        }
        System.out.println(valor);  //primero se lo imprime y luego se invoca a la funcion recursiva
        tailRecursion(valor - 1);
    }

se puede hacer de forma funcional la recursividad:

//forma funcional de recursividad
    public static int sumaFuncional (int numero) {
        return IntStream.rangeClosed(1,5)     //clase IntStream con metodo rangeClosed para generar numeros
                .reduce(0, (a,b) -> a + b);     //metodo reduce con lamda
    }

EJEMPLO CON TRES IMPLEMENTACIONES DE FACTORIAL:
 System.out.println("----------------------------------------------------------------");
        System.out.println("Factorial Iterativa: " + factorialIterativo(5));
        System.out.println("Factorial Recursiva: " + factorialRecursivo(5));
        System.out.println("Factorial Funcional: " + factorialFuncional(5));

 //factorial de un numero en forma iterativa
    public static int factorialIterativo (int numero) {
        int resultado = 1;
        for (int i = 1; i <= numero; i++) {
            resultado = resultado * i;
        }
        return resultado;
    }

    //forma recursiva de factorial de un numero

    public static int factorialRecursivo (int numero) {
        if (numero == 0) {
            return 1;
        }

        return numero * factorialRecursivo(numero- 1);  //forma tailRecursion
    }

    //forma funcional de un factorial de un numero

    public static int factorialFuncional(int numero) {
        return IntStream.rangeClosed(1, numero)
                .reduce(1, (a,b) -> a * b);
    }

la recursividad se usa mucho para recorrer arboles 
donde no se usa mucho por problemas. es por el consumo de memoria, cada vez que se lllama asi mismo
tiene que crear una copia de las variables para no modificarlas. 

System.currentTimeMillis(); se usa para medir el tiempo en milisegundos 

SERVICIOS REST: no todas las apps son tipos rest. 
es una aplicacion web que cumple una serie de patrones determinados. 
VERBOS HTTP: tipo de peticion que enviamos a un servidor, con protocolo http.
    los mas usados son GET(obtiene info o recurso de un servidor) y POST (envio datos al servidor). 
    tambien se usan PUT(se aplica sobre un usuario, y actualiza algo que ya existe, enviando todos los datos que cambiaron mas los anteriores) y 
    DELETE (elimina un recurso que ya exista).
    PATCH: actualiza usuario, pero envia solo los datos que cambiaron.
    todos estos son el patron CRUD(Create Replace Update Delete)

NOMENCLATURA: tienen que estar bien definidos, en el nombre,  se usan los nombres en plural: ej, users, cars, pets. no se usan VERBOS
http://www.dominio.tld/users/vroman/friends/paco (todo bien definido)

se suelen versionar las apis. http://wwww.dominio.tld/api/v1/users
generalmente cada vez que se las actualizan. 
Ej: app de bootcampers.
codigo de demo hecho por mi. 
tengo que crear un modelo, que contiene informacion de los usuarios o datos

el modelo contiene la informacion sobre los objetos que vamos a trabajar.
el servicio es lo que manipula el modelo, es lo que comunica el controlador con el modelo 

el controlador acepta la peticion, el modelo tiene la informacion y el servicio hace de union, manipula el modelo

POSTMAN: es un soft que realiza pruebas a apis, con peticiones con protocolo http. al obtener respuestas,
verificar si funciona o no, para depurar apis, o invocar manualmente. 
hay que crear una coleccion y desde alli realizar las peticiones. 

test para verificar que me tira estado 200 en postman
pm.test("Estado es 200", function (){
    pm.response.to.have.status(200)
});

test para ver cual es el primer elemento
pm.test("Primer elemento es uno", function (){
    reply=pm.response.json();
    pm.expect(reply[0].nombre).to.eql("uno");
});

test de latencia:


pm.test("Respuesta en menos de 10 ms",() => {
    pm.expect(pm.response.responseTime).to.be.below(10);
});

PATRONES DE DISEÑO:
es una tecnica para resolver un problema en el desarrollo de soft. 
solucion a un problema de una forma en concreto, y compartido por varios. 
23 patrones reconocidos. ya trae una forma concreta, con clases y demas. 
puede tener varios usos. patron singleton, observer. etc. 
sirve para no inventar cosas complejas. y ya trae soluciones que estan pensadas. 
los patrones no pretenden ser que se usen a la fuerza, si no se quiere usar, no se usa. 
no tienen que anular nuestra logica de intentar resolver un problema, y no anular la creatividad de cada uno. 
antipatrones: es una mala practica. 
tres tipos de patrones:
    por su nombre, cada uno tiene un nombre unico. 
    tambien por la intencion, que problema pretende resolver. 
    ej:builder, crear objetos complejos
    aplicabilidad, para que se puede usar ese patron.
    que consecuencias tiene usar un patron, positivas y negativas

    CREACIONALES:crear instancias de objetos, ayuda a encapsular y crear objetos.ej:builder,factory,prototipo
    MVC, mode view controler, object pull, es medio patron. 
    
    ESTRUCTURALES: solucionan diseños de composicion, cohesionan diferentes clases, acopla clases para que trabajemos mejor. Ej:fachada. 
    adapter:tiene un grupo de clases distintas, mediante una clase unica las une. adapta codigo de terceros a nuestro. 

    COMPORTAMIENTO: ofrece soluciones entre la interaccion y lo que hace las clases y objetos. ej:observer. 
    reacciona ante algo. 

    los podemos usar donde queremos, no estamos obligados a usarlos. si lo uso, y trabajo con otras personas, es mas facil para las otras personas. 

PATRONES CREACIONALES:
SINGLETON: solo puede haber una instancia de una clase. 
pretende evitar que se creen nuevas instancias, es decir, instancio una vez y luego opera con la instancia que ya habia creado.
getInstance: devuelve una instancia de la clase singleton
public static Singleton getInstance() {
    return new Singleton();
    }

este es el metodo de bloqueo del patron singleton:

public static Singleton getInstance() {
    if (singleton == null) {
        singleton = new Singleton();
    }
    return singleton;
}

//si singleton privada es nula, me devuelve una nueva. pero como siempre es nula xq no la instancia ni tiene constructor
//me devuelve siempre la misma, no crea una nueva. 
//con esto los dos tienen el mismo valor, y en la misma zona de memoria

tambien se puede usar para compartir acceso a una base de datos. evitar una instanciacion de una app muchas veces. 

//finalidad principal: no se puede instanciar una clase muchas veces, hacer privado el constructor
//luego implementar un metodo como pseudo constructor (getInstance) y luego verificar que no este crea
//con el if. 

FACTORY: crear una jerarquia de clase y usar una u otra de forma transparente. 
Ej: segun el pais donde estemos, nos da un precio u otro. 
primero. abtract class o interface. para definir el metodo con el que va a trabajar por debajo 

package Factory;

public class PrecioFactory {
    Precio precio;
    private PrecioFactory() {};  //oculto el constructor

    public PrecioFactory (String pais) {                     //aca paso el constructor con parametro para que funcione cuando ingresen un pais
        if (pais.equalsIgnoreCase("España")) {
            System.out.println("España, precio en EUR");
            this.precio = new PrecioEUR();
        } else if (pais.equalsIgnoreCase("UK")) {
            System.out.println("Estamos en UK");
            precio = new PrecioGBP();
    } else {
            System.out.println("Otro pais, precio en USD");
            precio = new PrecioUSD();
        }
    }

    public double getPrecio() {
        return precio.getPrecio();
    }
}

//creo una variable pero del tipo instancia
//luego agrego en el if los casos de precios segun el pais, con this.precio (variable de interface)

PATRON BUILDER: permite construir objetos complejos paso a paso
esto es programacion fluida

//ejemplo de StringBuilder

StringBuilder cadena = new StringBuilder("hola");
cadena.append(" amigos ").append(" como").append(" estan?");
System.out.println(cadena);

PATRON PROTOTYPE: de tipo constructor.
implementar de dos formas distintas:
el patron prototype, tiene como objetivo que una clase se clone asi misma, y que ese clon herede todo, tambien clona su estado
es como fuera un molde.

forma manual:

package Prototype;

public class Coche {
    public String marca;
    public String modelo;
    int puertas;

    public Coche () {};

    public Coche clonar () {   //creo mi metodo clonar y dentro instancio mi clase coche.
        Coche clon = new Coche();
        clon.marca = marca;     //por cada propiedad que tengo en mi clase, las tengo que igualar a mis propiedades de clase declaradas
        clon.modelo = modelo;
        clon.puertas = puertas;

        return clon;
    }
}


forma con interfaz cloneable:

package Prototype;

public class Coche implements  Cloneable{
    public String marca;
    public String modelo;
    int puertas;

    public Coche () {};

    public Coche clonar () throws CloneNotSupportedException{   //creo mi metodo clonar y dentro instancio mi clase coche.
        Coche clon = new Coche();
        return (Coche) this.clone();
    }
}

como arroja excepcion, en el main tengo que atraparlo en try y catch

try {
    Coche clonado = coche.clonar();
    clonado.puertas = 3;   //puedo modificar lo que quiero
    System.out.println(clonado.marca + " " + clonado.modelo + " " + clonado.puertas);   //esto me da lo mismo de coche.marca etc xq es clonado
} catch (CloneNotSupportedException e) {
        System.out.println("No se puede clonar: " + e.getMessage());

    }


PATRONES ESTRUCTURALES:
DECORADOR: añade funcionalidad a una clase existente, sin modificarla.
es decir, la mejora y añade funcionalidades sin tocar la clase original. 
esto se hace envolviendo las clases, es decir, una clase dentro de otra. 
envuelve unas cosas en otras
tiene aplicacion real en un sistema de notificaciones por ejemplo, notificacion basica decorar con mas metodos. 

package Decorator;

public class Main {
    public static void main(String[] args) {
        //TelefonoBasico telefonoBasico= new TelefonoBasico();
        //telefonoBasico.crear();

        TelefonoInteligente ti = new TelefonoInteligente(new TelefonoBasico());
        //es una instancia de tel inteligente que a su vez como parametro crea una instancia de telefono basico
        ti.crear();

        TelefonoNextGen tng = new TelefonoNextGen(new TelefonoInteligente(new TelefonoBasico()));
        tng.crear();
    }
}
//puedo invocar las veces que quiera el envoltorio, como en tng.
//tng.crear(); invoca al crear de telefonoNextGen, que a su vez invoca al crear de TelefonoInteligente, que a su vez invoca al crear de TelefonoBasico

package Decorator;

public class TelefonoDecorator implements Telefono{
    private Telefono telefono;   //creo variable del tipo interfaz

    public TelefonoDecorator(Telefono telefono) {     //creo constructor con parametro de interfaz que implemente la clase telefono.
        this.telefono = telefono;    //se implementa el patron decorado
    }    //es decir, que yo como parametro de constructor paso una interfaz que tiene que implementar lo que pida.


    @Override
    public void crear() {
        this.telefono.crear();

    }
}


//luego de constructor, tengo que crear los decoradores e implementarlos
//lo hago con la clase telefono inteligente,y heredar el decorador

PATRON ADAPTER:
crea una clase que permite que clases con la misma implementacion y con distinta, funcionen coherentemente.
clase adaptadora, es una clase intermedia que hace que multiples clases, trabajen coherentemente. 

package Adapter;

public class Main {
    public static void main(String[] args) {
        Horno horno = new Horno();
        Lampara lampara = new Lampara();
        PowerAdapter lightbulb = new PowerAdapter();  //uso el poweradapter xq esa clase implementa el lightbulb

        enciende(horno);
        enciende(lampara);
        enciende(lightbulb);

        System.out.println(estaEncedido(horno));
        System.out.println(estaEncedido(lampara));
        System.out.println(estaEncedido(lightbulb));


    }

    public static void enciende(Enchufable enchufable) {   //creo los envoltorios
        enchufable.enciende();
    }

    public static void apaga(Enchufable enchufable) {
        enchufable.apaga();
    }

    public static boolean estaEncedido(Enchufable enchufable) {
        return  enchufable.estaEncendido();
    }
}

siempre se crea un adaptador para cada cosa que quiero adaptar 

PATRON FC: FACADE 
es un envoltorio que simplifica algo que es complejo por detras. 
ocultar la complejidad, poniendo adelante algo sencillo. por ejemplo, con una llamada a muchas clases 


PATRONES DE COMPORTAMIENTO:

se ocupan de la comunicacion entre diferentes objetos. 
ITERATOR: implementa metodos en la clase, de forma que pueda recorrer datos sin saber como estan almacenados en esa clase. 








