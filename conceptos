Paradigmas de la programacion:
    IMPERATIVOS: mas antiguo, secuencia de instrucciones, tipo un paso a paso. 
    DECLARATIVO: se centra en el que, en lugar del como. se centra en el resultado final. 
Ejemplo:

const listaProgramadores = ["Gorka", "Martin", "Alex", "Leire"]

let nombres = []

//Programacion imperativa
listaProgramadores.forEach ((programador, posicion) => {
    nombres[posicion] = programador
})

//Programacion declarativa

nombres = [...listaProgramadores]

Ventajas:
    mas facil y legible el imperativo, la escalabilidad del codigo (ocupa mas lineas el imperativo, mas largo)


PARADIGMAS FUNCIONALES VS PROCEDIMENTALES:
    PROCEDIMENTALES: similar al imperativo, lleva mas lineas
    FUNCIONALES: bloques de codigo, en los cuales introducimos un parametro y obtenemos otro, en base a esos codigos ir creando nuestro programa. 
    se define una funcion, y despues la usamos en el codigo. 

DIVISION POR NIVELES: mas bajo es el nivel, mas caracteristicas especificas voy a poder tocar dentro del hardware. ç
    Lenguaje Maquina: 01010101010101
    Lenguaje Ensamblador: intermedio entre humano y maquina, con instrucciones especificas, el primer lenguaje de Programacion
    Bajo Nivel: son estos dos anteriores, relacionados con el hardware y la arquitectura. 

    Medio-bajo Nivel: C es antiguo, tiene capacidades de alto nivel y tiene capacidades de bajo nivel, C++ TAMBIEN. tienen acceso a los registros de la memoria.
    Medio-alto Nivel: Lenguajes de programacion modernos, Python, Java, Javascript.
    Alto Nivel: Lenguajes o frameworks de alto nivel, basados en los anteriores de medio nivel. Un framework es una serie de funcionalidades extra que se añaden a lenguajes ya conocidos en base a librerias, para que programar con estos lenguajes de medio nivel sea mas facil. 

PROCESO DE CONVERSION: necesitamos un traductor, para que nuestro lenguaje sea traducido en 1 y 0. 
    Existen dos formas: lenguajes de programacion compilados e interpretados. 
        compilador: C++, transforma nuestro codigo de lenguaje para hacer la salida. 
        interprete: Javascript o Python, no necesita compilador para que la maquina lo entienda, recien en la salida nos aparecen los errores. 

DESARROLLO DE CODIGO:
    Entorno de desarrollo integrado IDE: son programas con caracteristicas que nos ayudan a programar.Notepad++, Visual Studio Code, Atom, Sublime text, etc.

CONTROL DE VERSIONES:
    a principios de los 2000 se creo GIT, para controlar las versiones, revisar cambios. el primero fue el CVS (Concurrent Version System).

INTRODUCCION A LOS LENGUAJES DE PROGRAMACION:
    PYTHON: es el mas utilizado, se usa para todo, tiene frameworks para ayudar a desarrollar web (DJANGO y FLASK)
    es un lenguaje facil de aprender y utilizar, es un lenguaje interpretado.

    JAVA: es el mas utilizado por las grandes corporaciones, apps webs, es el lenguaje base para apps android, android studio es similar la sintaxis a java
    es sencillo de aprender.

    JAVASCRIPT: es el mas utilizado para web y para apps webs, ECMA es el organismo regulador de este lenguaje, no tiene pagina web. 
    las nuevas empresas estan usando NODEJS para sus servidores, es un framework de Javascript.
    mas facil de aprender que Java. es el mismo lenguaje para cliente y servidor.

    TYPESCRIPT: basado en Javascript, de microsoft, con funcionalidades extras. 
    aplica los tipos a Javascript, es decir, que hay que definir los tipos de variables. 
    es mas complejo que Javascript. 

    C#: es un lenguaje versatil, derivado de C y C++, es para backend, videojuegos, apps de microsoft
    se lo usa para videojuegos en el motor Unity
    es de dificultad moderada. 

    ASP.NET: Es un framework para hacer apps webs, apis, y sitios webs. creado por microsoft.
    dificultad moderada. es todo relacionado a microsoft. 

    PHP:uno de los lenguaje mas utilizados para desarrollar apps web. es de backend de servidores. 
    compite con Javascript y Python. mucho apoyo de la comunidad, muy sencillo de aprender
    webs mas lentas en comparacion a lenguajes mas modernos. 

    HTML: Hyper Text Markup Language, es un lenguaje de etiquetado. w3c decide los parametros de HTML. 
    todos los navegadores tienen que ser capaces de interpretar este lenguaje, 
    se usa para crear sitios webs y apps web pero estaticas. si queremos interactivas, necesitamos otro lenguaje (Javascript)
    es muy sencillo. si quiero programar web tengo que aprenderlo si o si. es como para crear el esqueleto de una pagina.

    CSS: Cascading Style Sheets, despues de hacer el esqueleto de la web con HTML, si le quiero dar color y forma, puedo usar CSS. 
    es lenguaje de diseño grafico, es en forma de cascada, forma parte de la triada web HTML, CSS, JAVA SCRIP (todas para hacer web)
    aplica estilos a una pagina web HTML. 

    AJAX: Asynchronous JavaScript And Xml, se usa para complementar las caracteristicas de Javascript dentro de una pagina web.
    tecnica de desarrollo web para crear apps webs asincronas, es una extension de Javascript para interactuar con servicios externos. 
    nos permite mantener la pagina web (html) en standby y esperar a recibir la info de base de datos sin recargar la pagina, 
    a traves de Javascript seriamos capaces de rellenar esa informacion que necesitamos sin necesidad de actualizar la pagina. 

    RUBY: se usa para servidores, Ruby y Ruby On Rails no son lo mismo. Ruby on Rails (es un framework para ruby para poder crear apps webs y paginas webs)
    como twitch, twitter, kickstarter,soundcloud, es facil de aprender.

    PERL: originalmente era para manipulacion de texto, tipo procesadores de texto, se usa para la administracion de sistemas, 
    desarrollo web, desarrollo de GUI (Graphic User Interface), es de complejidad moderada.

    DART: inicialmente desarrollado por google, se usa para web,servidor y movil. sintaxis del estilo C. Es complejo de aprender, y comunidad pequeña.
    
    KOTLIN: se desarrollo para tener las mismas aplicaciones que java pero mas moderno, es mas sencillo de usar que java con el mismo output -JAR.
    puede interactuar con codigo JAVA. Se usa para desarrollar aplicaciones moviles. 
    si se tienen proyectos en JAVA, se pueden migrar a KOTLIN. se usa sobre todo para Android.

    SWIFT: Lenguaje para programar aplicaciones IOS. es de APPLE. soporte solo a partir de IOS07.
    
    LENGUAJES MAS DEMANDADOS: JAVASCRIPT, HTML/CSS, PYTHON, SQL, JAVA, NODEJS, 

PARADIGMAS DE PROGRAMACION: formas de programar en diferentes Lenguajes
    PROGRAMACION ESTRUCTURADA: es una programacion por secuencia de instrucciones, funciona solo cuando se necesita algo simple o sencillo. 

    PROGRAMACION ORIENTADA A OBJETOS: en la mayoria de casos se usa esto. no es de secuencia, lo mas importante son los objetos. 
    la finalidad es que los objetos se interrelacionen, para que el usuario pueda acceder a todos los objetos o los que requiera. 
    lo mas importante de los objetos es que tiene dos tipos de propiedades: 
        los DATOS o ATRIBUTOS. Estos pueden ser: nombre,nombre usuario,apellidos,edad,email,etc.
        las FUNCIONES o FUNCIONALIDAD a traves de los metodos. Nos permite añadir funcionalidad.
        Puede ser: login,registro,editar_perfil,logout,comprar,etc. 
        Cada objeto tiene dos caracteristicas, atributos y funcionalidad. 

        Para crear los Objetos usamos las CLASE, que es un template. esto ya tiene atributos y funciones, en base a esta plantilla
        vamos creando objetos diferentes.Por ejemplo: Clase USUARIO, a partir de ese template,
        creamos los damos objetos usuarios, con diferentes caracteristicas, se llama instanciar. 
        cada uno de estos objetos, sobre el template, es una instancia. 

        4 CONCEPTOS DE OBJETOS:
            ABSTRACCIÓN: proceso para definirle los atributos y funcionalidad al objeto.
            ENCAPSULAMIENTO: dentro de un mismo objeto, tener todos los atributos y metodos para poder tratar
            ese objeto como una variable. 
            HERENCIA:desde una clase, podemos derivar otras clases. el primer objeto seria el clase padre
            y desde alli, podemos crear nuevas clases (objetos) hijo, es decir, hereda los atributos
            y metodos del padre, es decir de la primer clase, a eso se le puede agregar 
            o modificar metodos, eso se llama reveldia, revelarse a sus padres. 

            POLIMORFISMO: Multipleforma, es decir, podemos usar un mismo metodo, pero 
            con distintas formas, por ejemplo: registro (email), registro (facebook), registro (github).

    PROGRAMACION FUNCIONAL: su puede usar con los dos anteriores, 
    Usa FUNCIONES PURAS: al llamarse una vez, se obtiene un resultada y todas las veces que se llamenn,
    siempre devuelve el mismo resultado. Cuando cambia alguna variable, a medida que llamo a la funcion
    eso no es una funcion pura. 

    FUNCIONES SIN ESTADO: para esto se usa la recursividad, es cuando una funcion se llama asi mismo. 
        //RECURSIVIDAD.
        // CALCULO FACTORIAL DE UN NUMERO ENTERO
        // FACTORIAL DE 5 = 5 * 4 * 3 * 2 * 1 = 120

        // FUNCION NO RECURSIVA QUE TIENE UN ESTADO INTERNO (PROGRAMACION ESTRUCTURADA)
        function factorial (num) {
            let fact = num
            for (let i = num -1; i > 0 ; i= i -1) {
                fact = fact * i
            }
            return fact
        }

        console.log (factorial(5))

        //FUNCION RECURSIVA (que se vuelve a llamar) (PROGRAMACION FUNCIONAL)
        function factorial_rec(num) {
            if (num == 1) return 1
            return num * factorial_rec (num -1)
        }


    Ejemplo:

    function suma (num1, num2) {
        return num1 + num2
    }

    function multiplica (num 1, num2) {
        return num1 + num2
    }

    //ESTA FUNCION USA OTRA FUNCION PURA, y sigue siendo pura ya que se compone de dos puras.
    function suma_y_multiplica (num1, num2) {
        return suma (num1, num2) * multiplica (num1, num2)
    }


    console.log(suma(1,4))
    console.log(multiplica(1,4))
    
FRONTEND Y BACKEND:
    La diferencia es que el front es la pagina en donde el cliente ve todo, programa la interfaz, solo lo visual para representar los datos y el back es donde no se ve todo lo que viene por detras, para que esa pagina o servicio funcione. El back se encarga de dar toda la info para el frontend. Esta todo interconectado. Desde el cliente, se hace una consulta, se llama al servidor, el cual puede hacer una consulta a una base de datos. Ese servidor tiene que acceder a noticias, usuarios, estilos. Cuando se tiene toda la informacion desde el back, se manda al frontend, y el cliente pueda interpetrar. La mayor parte del calculo debe estar en el backend. 
FULLSTACK: es front y back, es programar las dos cosas. stacks: estructuras o conjuntos. 

LENGUAJES DEL LADO DEL SERVIDOR: JAVA,RUBY,PHP,ASP.NET,PERL,C#,PYTHON, NODEJS (framework de javascript). Algunos tambien sirven para desarrollar aplicaciones de cliente, como PYTHON Y PHP. Se encargan de liberar la mayor carga computacional al cliente, la informacion. 

LENGUAJES DEL LADO DEL CLIENTE: {HTML,CSS,JAVASCRIPT} TRIADA MAS UTILIZADA, AJAX,TYPESCRIPT. 

CMS: Content Management System. Es un software que tiene su propio frontend y su backend, a traves de un CMS sos capaz de crear una pagina web sin necesidad de programar el front ni el back. Cada uno tienen acceso a una base de datos. Nos da muchisima agilidad al momento de crear paginas web. Algunos son: {WORDPRESS, JOOMLA, DRUPAL, MAGENTO, PRESTASHOP} estos cinco estan programados en php y javascript, ,{SHOPIFY esta creado en HTML Y javascript, enfocado en la creacion de paginas online, ODOO esta programado en Python y en javascript, la mayor parte de su desarrollo esta enfocado en CRM (Client Relationship Manager).

FRAMEWORKS: estructuras o marcos. es una serie de librerias que facilitan la creacion de paginas webs, servidores, etc. no son lenguajes de programacion, si no que complementan a los lenguajes. 
    Frameworks del cliente: ayudan a crear aplicaciones desde el punto del vista del cliente, es decir, desde el frontend. 
        Ejemplos: *AngularJS, ViewJs, ReactJs (los mas usados y utilizan Javascript).
        *Laravel, usa el lenguaje PHP, es de los mas utilizados 
        *Spring, usa el lenguaje JAVA
        *Microsoft.Net, usa C#.
        *Flash y Django usa Python. 

    Frameworks del servidor:Estan los dos mas utilizados en Javascript. EXPRESS JS y ADONIS JS.

    Frameworks de test unitarios: cuando desarrollamos una app y queremos que funcione bien, es una obligacion de realizar pruebas para que funcione bien. Los mas utilizados:
        *JEST: usa el lenguaje Javascript, a traves de la programacion se realiza en javascript.
        *JUNIT 5: para lenguaje JAVA. 
        *PHPUNIT: lenguaje PHP.
        *NUNIT Y XUNIT.NET: lenguaje en .NET (el de microsoft)
        *PYTEST: lenguaje Python. 

LIBRERIAS HTML desde el punto de vista el cliente, que manejan HTML.
    REACTJS: ayuda a trabajar con el DOM (Document Object Model), es decir para manipular la parte visible del HTML, se puede cambiar textos, colores, funcionalidades de botones,  
    JQUERY: ayuda a trabajar con el DOM (Document Object Model), es decir para manipular la parte visible del HTML, se puede cambiar textos, colores, funcionalidades de botones,  
    BOOTSTRAP: Una de las mas utilizadas, ayuda con los estilos, CSS (estilos), clases de las etiquetas, para crear botones, ventanas, animaciones, etc.

SERVIDORES WEB: servir paginas web, archivos mp3, archivos videos mp4,pdf, cualquier archivo. no deja de ser un soft. 
    APACHE: es el mas utilizado, es multiplataforma,  
    NGNIX: es un poco mas rapido que apache, 
    TOMCAT: uno de los clasicos. 
    OPENLITESPEED: version de codigo abierto de litespeed.
    MICROSOFT IIS: 
    NODEJS: desde 2009, programado en javascript,sirve para tener el mismo lenguaje desde cliente como servidor. 
Nos pueden servir para conexiones NFTP, servidor de correo electronico, servidor WEB, servidor de base de datos (como proveedor de base de datos)

NAVEGADORES: los mas usados 
    MICROSOFT EDGE: viene por defecto con windows, ex explorer.
    FIREFOX: el segundo mas usado, para desarrollar tiene herramientas buenas.
    GOOGLE CHROME: normalmente es el que se usa para desarrollar.
    SAFARI: si desarrollas apps para iphone, usar este. de APPLE.
    OPERA: el tercero mas usado. 
    BRAVE: centrado en criptomonedas, basado en chrome por su codigo fuente (chromio), 

STACKS: conjuntos de tecnologias que me permiten crear una pagina web en modo fullstack. desde el cliente y desde el servidor. 
    
    *XAMPP (Multiplataforma Apache MySql Php Perl Python), LAMP (Linux Apache MySql Php) Y WAMP (Windows Apache MySql Php Perl Python): son los mas usados, basados en APACHE.
    
    *MERN (MongoDB Express Reactjs NodeJs), MEAN (MongoDb Express Angular NodeJs), MEVN (MongoDb Express ViewJs NodeJs), PERN (Perl Express ReactJs NodeJs) : todos basados en Javascript y en NodeJS. Podes usar las combinaciones que quieras, pero en funcion de las tecnologias que usas se definen los stacks. 

INTRODUCCION AL DESARROLLO MOVIL: 
    PLATAFORMAS MOVILES: los mas usados son estos dos 
        ANDROID
        IOS

    ENTORNOS DE DESARROLLO ESPECIFICOS PARA CADA PLATAFORMA: IDEs y Emuladores
        XCODE: para IOS
        ANDROID STUDIO: para Android
        cada uno de estos tiene su propio emulador

    LENGUAJES DE PROGRAMACION QUE USAN:
        ANDROID STUDIO usa KOTLIN o JAVA, o los dos, ya que son compatibles. 
        XCODE usa lenguaje SWIFT.

    FRAMEWORKS Y LIBRERIAS:
        XAMARIN: usa lenguaje C# con .NET, estos son los de microsoft
        FLUTTER: usa lenguaje DART
        REACT NATIVE: usa Javascript con el framework REACT. Es el que mas se usa. 
        La diferencia entre estos tres, es que cuando creamos apps compilamos la aplicacion nativa, pueden crear para Android o IOS, crean codigo nativo. Mientras que IONIC no compila directo la app nativa, usa un emulador web para poder ejecutar su app, para que parezca nativa. 

        IONIC: es un frame exclusivo en desarrollo movil, desarrolla apps webs basadas en el framework ANGULAR (de Javascript), ademas usa un web view, lo que hace es crear un simulador web que se integra para desarrollar la app y poder ejecutarlo en el celu. Ademas tambien puede usar REACT y VIEW. Usa tambien un bridge, para que tenga funcionalidades nativas. este bridge es APACHE CORDOVA.

        


    



